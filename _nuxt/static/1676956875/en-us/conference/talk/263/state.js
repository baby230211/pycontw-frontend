window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002Fpycontw-frontend\u002F_nuxt\u002Fstatic\u002F1676956875",layout:"default",error:b,state:{sponsorsData:[],jobsData:[],schedulesData:[],keynotesData:[],youtubeInfo:[],speechesData:[],speechData:{id:263,begin_time:"2022-09-03T04:55:00Z",end_time:"2022-09-03T05:25:00Z",is_remote:false,location:"5-r1-2",youtube_id:a,title:"REST API request payload validator as a decorator",category:"CORE",language:"ENEN",python_level:"INTERMEDIATE",recording_policy:c,abstract:"Developers often mess up the validation steps of the payloads from API requests. Following a systematic way to setup the validator and keep code clean is crucial.\r\n\r\nA decorator is a function that takes another function as an argument and extends its behavior without explicitly modifying it. Validator-as-a-decorator is an ideal approach for function-based APIs since the validation always happens before the API call happens. It is also reusable and prevent the need of changing the API implementation itself.\r\n\r\n\r\nIn this talk, I'll first use a Flask (web framework) + Cerberus (3rd-party data validation library) example to demo the steps of building a Validator-as-a-decorator. \r\n\r\nThe other part of the talk, I'll compare different data validation library in both functionality and restriction aspects, also briefly mention how other web frameworks (Django\u002FFastAPI) deal with request payload validation.",detailed_description:"Here are the data validation libraries would be mentioned in this talk:\r\n* [Cerberus] https:\u002F\u002Fdocs.python-cerberus.org\u002Fen\u002Fstable\u002F\r\n* [jsonschema] https:\u002F\u002Fpython-jsonschema.readthedocs.io\u002Fen\u002Fstable\u002F\r\n\r\nReferences on how other web frameworks deal with request payload validation:\r\n* [Data spec validator for Django] https:\u002F\u002Fgithub.com\u002Fhardcoretech\u002Fdata-spec-validator\r\n* [Pydantic and how it's used by FastAPI] https:\u002F\u002Ffastapi.tiangolo.com\u002Ftutorial\u002Fbody\u002F",slide_link:"https:\u002F\u002Fdrive.google.com\u002Ffile\u002Fd\u002F1WMPMgOp6mpLTZf-U_abGfDRLCTCc-ois\u002Fview?usp=sharing",slido_embed_link:"https:\u002F\u002Fapp.sli.do\u002Fevent\u002Fez4eKwjekuNrwQbbDmEjL9",hackmd_embed_link:"https:\u002F\u002Fhackmd.io\u002F@pycontw\u002FHkrTI6XJo",speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Ftemp\u002Fmedia\u002Fcache\u002Ff0\u002Fe2\u002Ff0e2f9199a56a8bab5ed294d03e7d4b7.jpg",name:"Sammy Wen",github_profile_url:"https:\u002F\u002Fgithub.com\u002Fhsiangyuwen",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002Fhsiangyuwen",facebook_profile_url:a,bio:"Software Engineer II @ Nylas. Currently in Vancouver, BC, Canada.\r\n\r\nMy 5-year journey in Python is awesome! So glad to see the community keeps growing!"}],event_type:"talk"},relatedData:[],i18n:{routeParams:{}}},serverRendered:c,routePath:"\u002Fen-us\u002Fconference\u002Ftalk\u002F263",config:{gtm:{id:a},_app:{basePath:"\u002Fpycontw-frontend\u002F",assetsPath:"\u002Fpycontw-frontend\u002F_nuxt\u002F",cdnURL:b}}}}("",null,true));