window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002Fpycontw-frontend\u002F_nuxt\u002Fstatic\u002F1676956875",layout:"default",error:a,state:{sponsorsData:[],jobsData:[],schedulesData:[],keynotesData:[],youtubeInfo:[],speechesData:[],speechData:{id:240,begin_time:"2022-09-04T02:35:00Z",end_time:"2022-09-04T03:05:00Z",is_remote:false,location:"5-r1",youtube_id:b,title:"Data Oriented Programming with Python",category:"PRAC",language:"ENEN",python_level:"INTERMEDIATE",recording_policy:c,abstract:"Data-Oriented Programming (DOP) is a programming paradigm that makes the systems we build less complex inspired by Clojure. The cool thing is that DOP is language-agnostic: it is applicable to any programming language. \r\n\r\nIn Python, we commonly taught using OOP for abstraction in our code. Information systems around software constructs that combine code and data (e.g. objects instantiated from classes). But in DOP, it encourages the separation of code from data. Moreover, DOP provides guidelines about how to represent and manipulate data. The essence of DOP is that it treats data as a first-class citizen; it gives developers the ability to manipulate data inside a program with the same simplicity as they manipulate numbers or strings.\r\n\r\nIn this talk, we will explore what, when, and how to use DOP with Python.",detailed_description:"We know OOP is relatively complex and it has some common pains that Object Oriented developers experience when they develop a system. For example, many relationships between classes, unpredictable code behavior, not trivial data serialization, complex class hierarchies.\r\n\r\nThis Talk is not meant to be read as critical of OOP. Its purpose is to raise awareness of the\r\ntendency towards increased complexity of OOP as a programming paradigm and to motivate you\r\nto discover a different programming paradigm where the system complexity tends to be reduced,\r\nnamely Data Oriented programming.\r\n\r\nData-Oriented programming (DOP) is a programming paradigm aimed at simplifying the design\r\nand implementation of software systems where information is at the center: systems such as\r\nfront-end or back-end web applications and web services.\r\n\r\nDOP is based on 4 fundamental principles.\r\n\r\n1. Separate code (behavior) from data.\r\n2. Represent data with generic data structures.\r\n3. Data is immutable.\r\n4. Separate data schema from data representation.\r\n\r\nEach one of them we will explore in this talk with the Python examples.\r\n\r\nresources: \r\nhttps:\u002F\u002Fblog.klipse.tech\u002Fdatabook\u002F2020\u002F09\u002F29\u002Fdo-principles.html",slide_link:"https:\u002F\u002Fdocs.google.com\u002Fpresentation\u002Fd\u002F1HFF23gMrgV_prjwPxQ20K8_-m-fkmKcS0y-YLJ0YhTg\u002Fedit?usp=sharing",slido_embed_link:"https:\u002F\u002Fapp.sli.do\u002Fevent\u002Fu2UG4gZau2FQGhW1qmrfNj",hackmd_embed_link:"https:\u002F\u002Fhackmd.io\u002F@pycontw\u002FHJhevT7Jj",speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Ftemp\u002Fmedia\u002Fcache\u002F8e\u002Fd0\u002F8ed04ef95d94b44161c84f98de2aacff.jpg",name:"Doni Rubiagatra",github_profile_url:"https:\u002F\u002Fgithub.com\u002Frubiagatra",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002Frubiagatra",facebook_profile_url:"https:\u002F\u002Fwww.facebook.com\u002Frubiagatra\u002F",bio:"Head of Engineering at Zero One Group | Tech Mentor | Mathematical Thinker"}],event_type:"talk"},relatedData:[],i18n:{routeParams:{}}},serverRendered:c,routePath:"\u002Fzh-hant\u002Fconference\u002Ftalk\u002F240",config:{gtm:{id:b},_app:{basePath:"\u002Fpycontw-frontend\u002F",assetsPath:"\u002Fpycontw-frontend\u002F_nuxt\u002F",cdnURL:a}}}}(null,"",true));