window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002Fpycontw-frontend\u002F_nuxt\u002Fstatic\u002F1676956875",layout:"default",error:b,state:{sponsorsData:[],jobsData:[],schedulesData:[],keynotesData:[],youtubeInfo:[],speechesData:[],speechData:{id:252,begin_time:"2022-09-04T05:25:00Z",end_time:"2022-09-04T05:55:00Z",is_remote:false,location:"5-r1",youtube_id:a,title:"When is an exception not an exception? Using warnings in Python",category:"CORE",language:"ENEN",python_level:"INTERMEDIATE",recording_policy:c,abstract:"Python's warnings are exceptions â€” but they're also distinct from exceptions, and are both used and trapped differently. In this talk, I'll introduce warnings, how to raise, trap, and redirect them, and show you best practices for their use.\r\n\r\nMany experienced developers don't know that Python's warning system supports filtering and suppressing warnings quite flexibly, based on a variety of parameters. You can thus turn certain warnings into (potentially fatal) exceptions, or ignore them entirely -- or enjoy the default behavior, in which they appear on the screen.\r\n\r\nIn addition to showing you how you can create and display warnings, I'll also show you how you can create your own, and (perhaps even more significantly) give examples of when they're appropriate.",detailed_description:"If your code encounters a big problem, then you probably want to raise an exception. But what should your code do if it finds a small problem, one that shouldn't be ignored, but that doesn't merit an exception? Python's answer to this question is warnings.\r\n\r\nIn this talk, I'll introduce Python's warnings, close cousins to exceptions but still distinct from them. We'll see how you can generate warnings, and what happens when you do. But then we'll dig deeper, looking at how you can filter and redirect warnings, telling Python which types of warnings you want to see, and which you want to hide. We'll also see how you can get truly fancy, turning some warnings into (potentially fatal) exceptions and handling certain types with custom callback functions.\r\n\r\nAfter this talk, you'll be able to take advantage of Python's warning system, letting your users know when something is wrong without having to choose between \"print\" and a full-blown exception.",slide_link:a,slido_embed_link:"https:\u002F\u002Fapp.sli.do\u002Fevent\u002F4kNcBDETXQmm6Erje8Hjyp",hackmd_embed_link:"https:\u002F\u002Fhackmd.io\u002F@pycontw\u002FBkUzP6Xyj",speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Ftemp\u002Fmedia\u002Fcache\u002F8a\u002Fb1\u002F8ab13b485e377814ac7e82f23d0b0ac9.jpg",name:"Reuven M. Lerner",github_profile_url:"https:\u002F\u002Fgithub.com\u002Freuven",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002Freuvenmlerner",facebook_profile_url:"https:\u002F\u002Fwww.facebook.com\u002Freuvenmlerner",bio:"Teaching Python and data science around the world since 1995. Author of the books \"Python Workout\" and \"Pandas Workout\". Publisher of the \"Better developers\" newsletter. I spend each day trying to help people improve their Python skills."}],event_type:"talk"},relatedData:[],i18n:{routeParams:{}}},serverRendered:c,routePath:"\u002Fzh-hant\u002Fconference\u002Ftalk\u002F252",config:{gtm:{id:a},_app:{basePath:"\u002Fpycontw-frontend\u002F",assetsPath:"\u002Fpycontw-frontend\u002F_nuxt\u002F",cdnURL:b}}}}("",null,true));