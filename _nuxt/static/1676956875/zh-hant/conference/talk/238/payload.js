__NUXT_JSONP__("/zh-hant/conference/talk/238", (function(a,b){b.id=238;b.begin_time="2022-09-03T06:05:00Z";b.end_time="2022-09-03T06:35:00Z";b.is_remote=false;b.location="6-r2-1";b.youtube_id=a;b.title="Exploring Network Clusters in Python";b.category="DATA";b.language="ENEN";b.python_level="INTERMEDIATE";b.recording_policy=true;b.abstract="This workshop explores popular network clustering algorithms (using the scikit-network and networkx Python libraries) on real-world movie datasets -- and shows how to find the path between two actors (via costars), how Iranian and Turkish actors are far removed from Hollywood but close to each other, and the one major film industry that is far away from the rest of the world.";b.detailed_description="Network clustering is a way to explore community structure in social networks.\r\n\r\nIn this talk, we'll take actors on the Internet Movie Database and explore the clusters they form, connections between people, and outliers in those clusters.\r\n\r\n\r\nPART 1. EXPLORING CLUSTERS (10 min)\r\n\r\nWe'll group the actor universe into distinct clusters, e.g. Hollywood, British actors, Chinese actors, etc., based on who acts most often with whom. Each actor belongs to one of these clusters.\r\n\r\nYou'll learn how to do this using different clustering algorithms in scikit-network and understand which model works better in which scenarios.\r\n\r\nWe'll drill down into a few clusters to see the sub-clusters. For example, to see how the Mexican vs Italian sub-clusters emerge in Hollywood, and how distinct they are.\r\n\r\nYou'll learn the principles of hierarchical clustering in the process.\r\n\r\n\r\nPART 2. EXPLORING CONNECTIONS (15 min)\r\n\r\nIn this second part, we'll explore which clusters are closer to each other. For example, the British cluster is closest to the Hollywood cluster. The Turkish cluster is closest to the Iranian cluster.\r\n\r\nYou'll learn metrics in clustering -- such as modularity -- that define how tightly knit a cluster is, and how close two clusters are to each other.\r\n\r\nWe'll see how one cluster can connect with another through connectors -- actors who act across clusters -- and learn the best way for a budding Malaysian actor to enter Hollywood.\r\n\r\nYou'll learn how to use shortest path algorithms and prioritize when there are multiple paths of equal length.\r\n\r\n\r\nPART 3. EXPLORING OUTLIERS (10 min)\r\n\r\nIn this third part, we'll explore which actors act more with other clusters than their own. Sean Connery and Penelope Cruz are examples of Hollywood actors who act more outside Hollywood, for example.\r\n\r\nYou'll learn how to detect outliers within network clusters.\r\n\r\n\r\nSYNTHESIS (5 min)\r\n\r\nWe'll see how these principles apply to any network -- such as people who email each other, or products that are bought together.\r\n\r\nBy the end of the talk, you'll have a practical understanding of how to apply network clustering to any network.";b.slide_link=a;b.slido_embed_link="https:\u002F\u002Fapp.sli.do\u002Fevent\u002FdWbck3ZNyGcK68GdWN8GZi";b.hackmd_embed_link="https:\u002F\u002Fhackmd.io\u002F@pycontw\u002FHJ-lvT7Ji";b.speakers=[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Ftemp\u002Fstatic\u002Fimages\u002Fdefault_head.png",name:"Anand S",github_profile_url:"https:\u002F\u002Fgithub.com\u002Fsanand0",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002Fsanand0",facebook_profile_url:a,bio:"Anand is a co-founder of Gramener, a data science company. He leads a team that automates insights from data and narrates these as visual data stories. He is recognized as one of India's top 10 data scientists, and is a regular TEDx speaker.\r\n\r\nAnand is a gold medalist at IIM Bangalore and an alumnus of IIT Madras, London Business School, IBM, Infosys, Lehman Brothers, and BCG.\r\n\r\nMore importantly, he has hand-transcribed every Calvin & Hobbes strip ever and dreams of watching every film on the IMDb Top 250.\r\n\r\nHe blogs at http:\u002F\u002Fs-anand.net. His talks are at https:\u002F\u002Fbit.ly\u002Fanandtalks"}];b.event_type="talk";return {data:[{speechData:b}],fetch:{},mutations:[["setSpeechData",b]]}}("",{})));