__NUXT_JSONP__("/conference/talk/258", {data:[{speechData:{id:258,begin_time:"2022-09-03T04:55:00Z",end_time:"2022-09-03T05:25:00Z",is_remote:false,location:"4-r0",youtube_id:"",title:"Play Digital Signal Processing with Python (using SigmaDSP)",category:"EMBED",language:"ZHEN",python_level:"INTERMEDIATE",recording_policy:true,abstract:"- 高階的音響喇叭非常昂貴，它們聽起來和一般的喇叭就是不一樣，但到底有何不同? 這個差異有辦法數據化\u002F視覺化嗎?   \r\n- 市面上的耳機這麼多款，到底哪一副耳機的音色你會最喜歡呢?   \r\n- 喜歡寫程式的你，是否想過如何用 Python 來控制並優化你音響喇叭的響應曲線呢?   \r\n- 我們有辦法讓一副耳機 去模仿任一款耳機的音色表現嗎?  \r\n- 為了控制音訊的產出，高階的設備上 有很多按鍵與旋鈕。音訊處理與產出的過程中，可以用 Python 程式 來取代這些按鍵旋鈕，並且做到自動化嗎?  \r\n- 如果我們不需要佈線 就可以控制遠端設備上的音訊產出，設備與場地的佈署也就更加容易。音訊設備的控制，可以 無線化\u002F雲端化 嗎?   \r\n有興趣的話，進來聽聽吧!",detailed_description:"- 好的音響聽起來就是不一樣，但是也非常貴。如果要提升自己家裡音響的表現，使用 [DSP (Digital Signal Processing)](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FDigital_signal_processing#:~:text=Digital%20signal%20processing%20(DSP)%20is,variety%20of%20signal%20processing%20operations.) 通常是最便宜與快速的方法了。\r\n- 市面上最常見的DSP設備 應該就是[等化器](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FEqualization_(audio))了，但是雖然經過等化器的音色改變了，和理想的音色表現到底還有多少差異，往往取決於專業耳朵的判斷，這也就是一般人要改善自己音響的最大門檻。\r\n- 如果我們可以使用 Python 和一些便宜的設備，來測量與視覺化不同音響的 [頻率響應](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FFrequency_response)曲線，應該就可以大幅度地降低這個門檻，幫助人們把錢花在刀口上。\r\n- 在將音響的頻率響應 數據化\u002F視覺化 之後，我們還需要能透過 Python 來產生所需要的 DSP 效果，讓我們音響的表現趨近理想。這時候 [SigmaDSP](https:\u002F\u002Fyoutu.be\u002FtBn7lo7RdkM) 和 [SigmaStudio](https:\u002F\u002Fyoutu.be\u002FPPmkCVz5LAs) 就是最方便有效的工具了。透過視覺化的圖形介面，使用者可以輕鬆地拖拉功能方塊，就可以達成需要的 DSP 效果。\r\n- 而我們可以[用 Python 來控制 SigmaDSP 的行為](https:\u002F\u002Fgithub.com\u002FWei1234c\u002FSigmaDSP)，也就可以動態地改變整個音訊的產出結果，[讓音響的音色 可以藉由程式來自動地最佳化](https:\u002F\u002Fgithub.com\u002FWei1234c\u002FDRC\u002Fblob\u002Fmaster\u002Fnotebooks\u002FDigital%20Room%20Correction.ipynb)。\r\n- 同時，我們更可以透過 [TCP\u002FIP channel](https:\u002F\u002Fgithub.com\u002FWei1234c\u002FTCPi) 來控制遠端的 SigmaDSP，也就是說，透過 Python 程式，我們可以控制一群 DSP 設備，不管這些設備是在網路上的什麼地方。也正因為設備可以連網，所以可以方便地開放存取，資源因而得以分享共用，為後續開啟了更多的可能性。  \r\n\r\n\r\n- [GitHub repo.](https:\u002F\u002Fgithub.com\u002FWei1234c\u002FDRC)\r\n- [Code example](https:\u002F\u002Fgithub.com\u002FWei1234c\u002FDRC\u002Fblob\u002Fmaster\u002Fnotebooks\u002FDigital%20Room%20Correction.ipynb)\r\n- [More code examples (*.ipynb)](https:\u002F\u002Fgithub.com\u002FWei1234c\u002FDRC\u002Ftree\u002Fmaster\u002Fnotebooks)  \r\n- [Video](https:\u002F\u002Fyoutu.be\u002FYc0hUaKKuIw)\r\n\u003Cbr \u002F\u003E\r\n\r\n---\r\n\r\n### Post Talk Q&A:\r\n- 此專案發展過程中較困難的點為何 ?:\r\n    - AutoEQ 比較困難。曾經嘗試以PyTorch用 neural network 來對即時收音(每次 descent 就再收音一次)的訊號做最佳化，但是因為訊號源為 白噪音，本身就有 random 的特性，以至於 gradient descent 的過程並不穩定。後來採用 [Jaakko Pasanen 的模組](https:\u002F\u002Fgithub.com\u002Fjaakkopasanen\u002FAutoEq)來實現 AutoEQ 的功能 (只收音一次 然後每次 descent後 用公式估計EQ的效果)。\r\n\u003Cbr \u002F\u003E\r\n\r\n- 後續可能有什麼發展 ?:\r\n    - 以演唱會所用的 [中大型 mixer](https:\u002F\u002Fwww.google.com\u002Fsearch?q=analog+studio+console&sxsrf=ALiCzsYNu3GyiuOCqgKo9SUZItyvJsqxzQ:1662705409498&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjLibKqjIf6AhWuGaYKHbzmBnkQ_AUoAXoECAEQAw&biw=1536&bih=700&dpr=1.25) 為例，通常有這些缺點:\r\n\t\t- 體積巨大: 因為功能複雜所以需要很多按鍵與旋鈕，體積也因此偏大，較佔空間。\r\n\t\t- 重量偏重: 搬運不易，移動困難。\r\n\t\t- 價格昂貴: 零部件很多，而且系統封閉 造成競爭壁壘。\r\n\t\t- 維護困難: 因功能高度集成，如果其中一個 channel 或功能故障，就須整台送修，曠日廢時，維運上風險較高。\r\n\t\t- 功能與操作複雜不易上手: 使用者需要較長的學習時間。\r\n    - 以分散式系統的思維 重新設計系統:\r\n        - 一個複雜的 mixer，可以拆解為很多功能的組成。\r\n        - 每個(或數個)功能，可以使用一個 SigmaDSP 的晶片加上對應的韌體來取代。\r\n        - 我們可以把 一個 **SigmaDSP晶片+韌體** 視為一個 **DSP元件**，而且透過 [TCP\u002FIP channel](https:\u002F\u002Fgithub.com\u002FWei1234c\u002FTCPi)，這個DSP元件可以透過無線網路來存取與控制。\r\n        - 所以我們可以將一個 mixer視為 一個由很多DSP元件組成的 **分散式系統**，並透過 物件導向的思維 來設計並組織這些元件，達成 mixer 所需的功能。\r\n        - 而音訊的處理，本身就具有 pipe-line 的本質，所以我們也可將 mixer 視為一個 **分散式的 pipe-line 系統**。\r\n        - 而最重要的是，我們可以透過 Python 來控制這些DSP元件，也就能與 Python 背後豐沛的資源接軌。現今 Python 幾乎是 Machine-Learning\u002FAI 的同義字，也就是說，我們可以 **\"訓練\"** 一個 mixer 系統。後續也許就可以透過 Google Assistant 或者 chatbot 來控制 mixer，只要**說出操作需求**(例如: \"Lower sub-woofer 2dB\" 或 \"1200Hz boost 2dB, Q 1.4\")，或者藉由特定的**手勢**就可以達成相對的效果。\r\n        - 優點:\r\n            - 因為使用軟體控制，可以減少按鍵旋鈕，因此體積、重量可以降低。\r\n            - 因為是 open-source，降低進入障礙且可以集成眾人之力，因而可以大幅降低整體成本與價格。\r\n            - 因為採用分散式的DSP元件，抽換與維運相當容易且迅速。\r\n            - 藉由 Machine-Learning\u002FAI 的輔助，可以大幅降低學習曲線，讓使用者可以迅速駕馭複雜的系統。",slide_link:"https:\u002F\u002Fdrive.google.com\u002Ffile\u002Fd\u002F1QBlbwnfirm-59eNpEyZnh5BRw17FI5oe\u002Fview?usp=sharing",slido_embed_link:"https:\u002F\u002Fapp.sli.do\u002Fevent\u002FdQGjkmjd7W2cAb1LEUtFGX",hackmd_embed_link:"https:\u002F\u002Fhackmd.io\u002F@pycontw\u002FSyyTLTmyi",speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Ftemp\u002Fmedia\u002Fcache\u002Fd5\u002Fc6\u002Fd5c618cb28c46d3c4cccf9e3be84f6b4.jpg",name:"Wei Lin",github_profile_url:"https:\u002F\u002Fgithub.com\u002FWei1234c",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002FWei_1144",facebook_profile_url:"https:\u002F\u002Fwww.facebook.com\u002Fwei.lin.921025",bio:"策略規劃 是專長，寫程式 是興趣，對知識的渴望 與 領悟的喜悅 是我永恆的動力。"}],event_type:"talk"}}],fetch:{},mutations:[]});